:doc-config:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments both
#+startup: fold

# Use the ReadTheOrg theme for HTML export
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

#+options: num:nil
:end:

#+title: Doom Emacs Configuration

This is my configuration for Doom Emacs.

* Overview

A Doom Emacs configuration consists of at least three files:
- =init.el= - defines which of the existing Doom modules are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= - defines which packages should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= - contains all custom configuration and code.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

* File Headers

The following snippets contain the headers for each file, originally generated by the =doom install= command. They contain some important =elisp= indicators and notes.
#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file, config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>
#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file, config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
#+html: </details>
#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file, config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>
#+html: <br>

* Modules

The following code is part of the =init.el= file. It identifies the Doom modules that should be loaded at startup.
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       (ligatures +extra); ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       ;;(vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       (tty +osc)          ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua +lsp)        ; one-based indices? one-based indices
       (markdown +grip)  ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +dragndrop +gnuplot +pandoc +pretty +roam2)  ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)     ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)         ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       (yaml +lsp)       ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Configuration
** User Information

My personal information.
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Ben Melton"
      user-mail-address "ben@themeltons.net")
#+end_src

** Mac Settings

Special packages and configuration options for the Mac.

*** UI behavior

Assign modifier keys and disable passing Control characters to the system, to avoid that =C-M-space= launches the Character viewer instead of running =mark-sexp=.
#+begin_src emacs-lisp
(cond ((featurep :system 'macos)
       (setq mac-command-modifier       'meta
             mac-option-modifier        'alt
             mac-right-option-modifier  'alt
             mac-pass-control-to-system nil)))
#+end_src

*** Authentication source order

Doom configures =auth-sources= by default to include the Keychain on macOS, but it puts it at the beginning of the list. This causes creation of auth items to fail because the macOS Keychain sources do not support creation yet. Reverse it to leave =~/.authinfo.gpg= at the beginning.
#+begin_src emacs-lisp
(cond ((featurep :system 'macos)
       (after! auth-source
         (setq auth-sources (nreverse auth-sources)))))
#+end_src

*** Capturing links to external applications

=org-mac-link= implements the ability to grab links from different Mac apps and insert them in the file. Bind =C-c g= to call =org-mac-grab-link= to choose an application and insert a link.
#+begin_src emacs-lisp :tangle packages.el
(when (featurep :system 'macos)
  (package! org-mac-link))
#+end_src
#+begin_src emacs-lisp
(when (featurep :system 'macos)
  (use-package! org-mac-link
    :after org
    :config
    (setq org-mac-grab-Acrobat-app-p nil) ; Disable grabbing from Adobe Acrobat
    (map! :map org-mode-map
          "C-c g"  #'org-mac-grab-link)))
#+end_src

** [[https://github.com/doomemacs/doomemacs][Doom]]/[[https://www.gnu.org/software/emacs/][Emacs]]
*** Fonts

#+begin_src emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 11 :weight 'semi-light))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src

*** Themes

First, let's get all the themes loaded.
#+begin_src emacs-lisp :tangle packages.el
(package! doom-themes)
#+end_src

I like the dark Solarized theme. It's easy on the eyes.
#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-solarized-dark)
#+end_src

*** Appearance
**** Line Numbering

I like line numbers.
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

**** Word Counter

Enable a word count in the modeline. This is only shown for the modes listed in =doom-modeline-continuous-word-count-modes= (Markdown, GFM and Org by default).
#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count t)
#+end_src

**** [[https://github.com/doomemacs/doomemacs/tree/master/modules/ui/ligatures][Ligatures]]

I don't like ligatures in certain modes, such as =verilog-mode=. So, let's negate ligatures in these modes.
#+begin_src emacs-lisp
(after! ligature
  (setq ligature-ignored-major-modes
        (cl-union ligature-ignored-major-modes '(verilog-mode
                                                 verilog-ts-mode))))
#+end_src

*** Key Bindings

TODO

*** Auto Save & Backup Files

We want the safety of auto-save and backup files.
#+begin_src emacs-lisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

** [[https://orgmode.org/][Org-Mode]]

First, let's ensure we set the default source directory.
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

*** Appearance
**** Indentation

Each hierarchy adds two spaces of indentation by default. In order to save horizontal space when editing, change this to one space.
#+begin_src emacs-lisp
(after! org
  (setq org-indent-indentation-per-level 1))
#+end_src

We also want to ensure Org does not add extra indentation to the text to match the heading.
#+begin_src emacs-lisp
(after! org
  (setq org-adapt-indentation nil))
#+end_src

**** Visuals

Let's hide the (N-1) stars of a heading to reduce visual noise.
#+begin_src emacs-lisp
(after! org
  (setq org-hide-leading-stars 't))
#+end_src

Hide emphasis and other markup until it actually needs to be edited.
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src

**** Behavior

Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).
#+begin_src emacs-lisp
(after! org (setq org-insert-heading-respect-content nil))
#+end_src

*** [[https://github.com/awth13/org-appear][Org-Appear]]

Reveals hidden entities such as emphasis markers when moving the cursor over them.
#+begin_src emacs-lisp :tangle packages.el
(package! org-appear
  :recipe (:host github
           :repo "awth13/org-appear"))
#+end_src

#+begin_src emacs-lisp
(use-package! org-appear
  :defer t
  :hook (org-mode . org-appear-mode))
#+end_src

We want to reveal all Org entities.
#+begin_src emacs-lisp
(after! org-appear
  (setq org-appear-autoemphasis t)
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t))
#+end_src

Let's create a hook to reveal only when we are in =evil-mode='s insert mode. Note that org-appear expects to be enabled in Org mode buffers only, which is why the example attaches evil-mode hooks to the Org mode startup hook.
#+begin_src emacs-lisp
(after! org-appear
  (setq org-appear-trigger 'manual)
  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'evil-insert-state-entry-hook
                                       #'org-appear-manual-start
                                       nil
                                       t)
                             (add-hook 'evil-insert-state-exit-hook
                                       #'org-appear-manual-stop
                                       nil
                                       t))))
#+end_src

*** [[https://github.com/yilkalargaw/org-auto-tangle][Org-Auto-Tangle]]

Automatically runs =org-babel-tangle= upon saving any =org-mode= buffer.
#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

*** [[https://github.com/org-roam/org-roam][Org-Roam]]

Creates a highly interconnected knowledge database called a Zettelkasten.

*** [[https://github.com/org-roam/org-roam-ui][Org-Roam-UI]]

Renders the =org-roam= Zettelkasten in a web browser.

First, we need to unpin Doom's =org-roam= to ensure we have the latest and greatest.
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

Enable websockets for browser integration and configure the package. These are done after org-roam is loaded to reduce impact on Doom startup time.
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** (System)Verilog
*** [[https://github.com/veripool/verilog-mode][Verilog-Mode]]

Provides basic support for Verilog editing, including autos.
#+begin_src emacs-lisp :tangle packages.el
(package! verilog-mode)
#+end_src

Load the module by default for =*.v=, =*.vh=, =*.sv= and =*.svh= files.
#+begin_src emacs-lisp
(use-package! verilog-mode
  :mode "\\.s?vh?\\'")
#+end_src

*** [[https://github.com/gmlarumbe/verilog-ts-mode][Verilog-Ts-Mode]]

Provides syntax highlighting, indentation, =imenu=, =which-func=, navigation and basic beautify and completion features. It is derived from =verilog-mode= making AUTOs and other utilities still available.
#+begin_src emacs-lisp :tangle packages.el
(package! verilog-ts-mode)
#+end_src

Load the module only if tree-sitter support is available. We want to use tree-sitter by default for =*.v=, =*.sv=, =*.vh=, and =*.svh= files.
#+begin_src emacs-lisp
(use-package! verilog-ts-mode
  :if (treesit-available-p)
  :mode "\\.s?vh?\\'")
#+end_src

*** [[https://github.com/gmlarumbe/verilog-ext][Verilog-Ext]]

Provides advanced editing features for Verilog or SystemVerilog code.
#+begin_src emacs-lisp :tangle packages.el
(package! verilog-ext)
#+end_src

=verilog-ext-feature-list= selects enabled features.
#+begin_src emacs-lisp
(use-package! verilog-ext
  :hook ((verilog-mode . verilog-ext-mode))
  :init
  ;; Can also be set through `M-x RET customize-group RET verilog-ext':
  ;; Comment out/remove the ones you do not need
  (setq verilog-ext-feature-list
        '(font-lock
          xref
          capf
          hierarchy
          eglot
          lsp
;          lsp-bridge
;          lspce
          flycheck
          beautify
          navigation
          template
          formatter
          compilation
          imenu
          which-func
          hideshow
          typedefs
          time-stamp
          block-end-comments
          ports))
  :config
  (verilog-ext-mode-setup))
#+end_src

*** Appearance
**** Highlighting

Let's have pretty syntax.
#+begin_src emacs-lisp
(after! (verilog-mode)
  (setq verilog-fontify-variables               't
        verilog-highlight-grouping-keywords     't
        verilog-highlight-includes              't
        verilog-highlight-max-lookahead     100000
        verilog-highlight-modules               't))
#+end_src

**** Indentation

Always indent and match indentation with each item whenever possible, but I don't like =begin= indented after an =if=.
#+begin_src emacs-lisp
(after! (verilog-mode)
  (setq verilog-auto-indent-on-newline           't
        verilog-indent-lists                     't
        verilog-indent-begin-after-if           nil
        verilog-indent-class-inside-pkg          't
        verilog-indent-declaration-macros       nil
        verilog-indent-ignore-multiline-defines nil
        verilog-tab-always-indent                't))
#+end_src

Two spaces of indentation in general.
#+begin_src emacs-lisp
(after! (verilog-mode)
  (setq verilog-indent-level             2
        verilog-indent-level-behavioral  2
        verilog-indent-level-declaration 2
        verilog-indent-level-directive   2
        verilog-indent-level-module      2
        verilog-case-indent              2
        verilog-cexp-indent              2))

(after! (verilog-ts-mode)
  (setq verilog-ts-indent-level 2))

(after! (verilog-ext)
  (setq verilog-ext-formatter-indentation-spaces 2))
#+end_src

**** Alignment

In general, automatically align expressions whenever possible.
#+begin_src emacs-lisp
(after! (verilog-mode)
  (setq verilog-auto-lineup              'all
        verilog-align-assign-expr          't
        verilog-align-decl-expr-comments   't
        verilog-align-comment-distance      2
        verilog-align-ifelse               't))

(after! (verilog-ts-mode)
  (setq verilog-ts-align-decl-expr-comments 't))
#+end_src

*** Behavior

Automatically generate a newline after typing =;=, but don't tab to a comment. We have =evil-mode='s =A= command for that.
#+begin_src emacs-lisp
(after! (verilog-mode)
  (setq verilog-auto-newline    't
        verilog-tab-to-comment nil))
#+end_src

*** Completion

Let's use =tree-sitter= for completion if it is available.
#+begin_src emacs-lisp
(after! (verilog-ext)
  (setq verilog-ext-tags-backend
        (if (treesit-available-p)
            'tree-sitter
          'builtin)))
#+end_src

*** Hierarchy

Let's use [[https://github.com/veripool/verilog-perl][verilog-perl]]'s [[https://metacpan.org/pod/vhier][vhier]] tool to extract hierarchy if it is available, otherwise use =tree-sitter=.
#+begin_src emacs-lisp
(after! (verilog-ext)
  (setq verilog-ext-hierarchy-backend
        (cond ((executable-find "vhier") 'vhier)
              ((treesit-available-p) 'tree-sitter)
              (t 'builtin))))
#+end_src

*** Templates

Set some sane defaults for templating.
#+begin_src emacs-lisp
(after! (verilog-ext)
  (setq verilog-ext-template-clock              "clk"
        verilog-ext-template-reset            "rst_n"
        verilog-ext-template-reset-active-low      't))
#+end_src

*** Linting
** TRAMP
*** MS Windows
**** [[https://emacs.stackexchange.com/questions/76120/how-can-i-use-tramps-ssh-on-windows-10-with-the-native-ssh-exe][Native SSH Pseudo-Terminal]]

Since no "pseudo-terminal" is allocated, the classic PS1 is missing and TRAMP does not detect the prompt. We have to adjust the login arguments.

In order to force the allocation of a pseudo-terminal, we have to supply -tt as additional argument.
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (require 'cl-lib)
  (with-eval-after-load 'tramp
    (cl-pushnew '("-tt")
                (car (alist-get 'tramp-login-args
                                (cdr (assoc "ssh" tramp-methods))))
                :test #'equal)))
#+end_src
